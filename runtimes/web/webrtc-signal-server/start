#!/usr/bin/env node

const ws = require("ws");

const server = new ws.Server({port: 4445});
const clients = new Map();

function log () {
    if (!process.env.PRODUCTION) {
        console.log.apply(null, arguments);
    }
}

server.on("connection", (client, req) => {
    try {
        const url = new URL(req.url, `http://${req.headers.host}`);
        const peerId = url.searchParams.get("peerId");

        if (!peerId) {
            throw new Error("Missing peer ID");
        }

        if (clients.has(peerId)) {
            throw new Error("Peer ID already in use: "+peerId);
        }

        clients.set(peerId, client);

        client.on("message", data => {
            const { target, message } = JSON.parse(data);
            const otherClient = clients.get(target);
            if (otherClient) {
                log(`${peerId} --> ${message.type} --> ${target}`);
                otherClient.send(JSON.stringify({ source: peerId, message }));
            } else {
                log(`${peerId} tried to signal unknown peer ${target}. Replying with ABORT`);
                client.send(JSON.stringify({ source: target, message: { type: "ABORT" } }));
            }
        });

        client.on("close", () => {
            clients.delete(peerId);
            log(`${peerId} disconnected`);
        });

        log(`${peerId} connected`);

    } catch (error) {
        console.error(error);
        client.close();
    }
});

// Keep connections alive
setInterval(() => {
    for (const [peerId, client] of clients) {
        log(`PING ${peerId}`);
        client.ping();
    }
}, 20000);

// Don't crash on uncaught errors
process.on("uncaughtException", error => {
    console.error(error);
});
